#version 450

layout(local_size_x = 32) in;

#define CLUSTERER_BINDLESS
#include "clusterer_data.h"

layout(std140, set = 1, binding = 0) uniform ClustererParameters
{
    ClustererParametersBindless parameters;
};

const uint MAX_TRIANGLES = 8;
struct CullSetup
{
    vec4 data[3 * MAX_TRIANGLES];
};

layout(std430, set = 0, binding = 0) readonly buffer ClusterTransforms
{
    ClustererBindlessTransforms cluster_transforms;
};

layout(std430, set = 0, binding = 2) readonly buffer CullingSetup
{
    CullSetup data[];
} culling_setup;

layout(std430, set = 0, binding = 3) writeonly buffer Bitmask
{
    uint bitmask[];
};

shared uint shared_mask;

void main()
{
    uvec2 pixel = gl_WorkGroupID.yz;
    uint linear_coord = pixel.y * parameters.resolution_xy.x + pixel.x;
    uint base_index = linear_coord * parameters.num_lights_32;
    uint chunk_index = gl_WorkGroupID.z;
    uint type_mask = cluster_transforms.type_mask[chunk_index];
    uint local_index = gl_LocalInvocationIndex;

    if (local_index == 0u)
        shared_mask = 0u;

    vec2 uv = 2.0 * vec2(pixel) * parameters.inv_resolution_xy - 1.0;
    vec2 uv_stride = 2.0 * parameters.inv_resolution_xy;

    barrier();

    uint light_index = chunk_index * 32u + local_index;
    if (light_index < parameters.num_lights)
    {
        if ((type_mask & (1u << local_index)) != 0u)
        {
            vec4 ranges = culling_setup.data[light_index].data[0];
            vec4 transformed_ranges = culling_setup.data[light_index].data[1];
            mat2 clip_transform = mat2(culling_setup.data[light_index].data[2].xy,
                                       culling_setup.data[light_index].data[2].zw);
            vec4 ellipsis_inv_radius = culling_setup.data[light_index].data[3];

            if (ellipsis_inv_radius.x != 0.0)
            {
                vec2 intersection_center = 0.5 * (transformed_ranges.xz + transformed_ranges.yw);

                vec2 clip_lo = uv;
                vec2 clip_hi = uv + uv_stride;
                clip_lo *= parameters.clip_scale.zw;
                clip_hi *= parameters.clip_scale.zw;

                vec2 dist_00 = clip_transform * vec2(clip_lo.x, clip_lo.y) - intersection_center;
                vec2 dist_01 = clip_transform * vec2(clip_lo.x, clip_hi.y) - intersection_center;
                vec2 dist_10 = clip_transform * vec2(clip_hi.x, clip_lo.y) - intersection_center;
                vec2 dist_11 = clip_transform * vec2(clip_hi.x, clip_hi.y) - intersection_center;

                dist_00 *= ellipsis_inv_radius.yz;
                dist_01 *= ellipsis_inv_radius.yz;
                dist_10 *= ellipsis_inv_radius.yz;
                dist_11 *= ellipsis_inv_radius.yz;

                float max_diag = max(distance(dist_00, dist_11), distance(dist_01, dist_10));
                float min_sq_dist = 1.0 + max_diag;
                min_sq_dist *= min_sq_dist;

                vec4 d = vec4(
                    dot(dist_00, dist_00),
                    dot(dist_01, dist_01),
                    dot(dist_10, dist_10),
                    dot(dist_11, dist_11));

                if (all(lessThan(d, vec4(min_sq_dist))))
                    atomicOr(shared_mask, 1u << local_index);
            }
            else
            {
                uvec4 screen_bb = floatBitsToUint(culling_setup.data[light_index].data[4]);
                if (all(bvec4(greaterThanEqual(pixel, screen_bb.xy), lessThanEqual(pixel, screen_bb.zw))))
                    atomicOr(shared_mask, 1u << local_index);
            }
        }
        else
        {
        }
    }

    barrier();
    if (local_index == 0u)
        bitmask[base_index + chunk_index] = shared_mask;
}
