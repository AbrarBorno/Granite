#version 450
#extension GL_EXT_samplerless_texture_functions : require
layout(local_size_x = 8, local_size_y = 8) in;

#define CLUSTERER_NO_HELPER_INVOCATION
#include "../inc/subgroup_extensions.h"
#include "lighting_irradiance.h"
#include "../inc/render_parameters.h"

layout(push_constant) uniform Registers
{
    int patch_resolution;
    int face_resolution;
    int num_iterations_per_patch;
    float inv_patch_resolution;
    float inv_patch_resolution2;
} registers;

layout(rgba16f, set = 2, binding = 0) writeonly uniform image3D uAmbient;
layout(set = 2, binding = 1) uniform texture2D uProbeEmissive;
layout(set = 2, binding = 2) uniform texture2D uProbeAlbedo;
layout(set = 2, binding = 3) uniform texture2D uProbeNormal;
layout(set = 2, binding = 4) uniform texture2D uProbeDepth;
layout(set = 2, binding = 5) uniform sampler3D uPrevAmbient;

layout(set = 3, binding = 0) uniform Transforms
{
    mat4 inv_view_proj_for_face[6];
    vec3 cam_pos;
    vec3 cam_front;
} transforms;

layout(set = 3, binding = 1) uniform PerProbe
{
    vec4 texture_to_world[3];
    vec4 world_to_texture[3];
    vec3 inv_probe_resolution;
};

#ifndef PI
#define PI 3.1415628
#endif

mediump float maximum3(mediump vec3 v)
{
    return max(max(v.x, v.y), v.z);
}

mediump float weight_term(vec3 local_pos)
{
    mediump float w = 0.5 - maximum3(abs(local_pos - 0.5));
    return clamp(w * 20.0, 0.0, 0.9);
}

mediump vec3 compute_feedback_diffuse(vec3 world_pos, mediump vec3 normal)
{
    vec3 local_pos = vec3(
            dot(vec4(world_pos, 1.0), world_to_texture[0]),
            dot(vec4(world_pos, 1.0), world_to_texture[1]),
            dot(vec4(world_pos, 1.0), world_to_texture[2]));

    float lo_tex_coord = 0.5 * inv_probe_resolution.x;
    float hi_tex_coord = 1.0 - lo_tex_coord;

    mediump vec3 result;
    if (all(greaterThan(local_pos, vec3(0.0))) && all(lessThan(local_pos, vec3(1.0))))
    {
        float base_tex_x = clamp(local_pos.x, lo_tex_coord, hi_tex_coord) / 6.0;

        mediump vec3 normal2 = normal * normal;
        vec3 normal_offsets = mix(vec3(0.0), vec3(1.0 / 6.0), lessThan(normal, vec3(0.0)));
        float x_offset = base_tex_x + (0.0 / 3.0) + normal_offsets.x;
        float y_offset = base_tex_x + (1.0 / 3.0) + normal_offsets.y;
        float z_offset = base_tex_x + (2.0 / 3.0) + normal_offsets.z;

        result =
            normal2.x * textureLod(uPrevAmbient, vec3(x_offset, local_pos.yz), 0.0).rgb +
            normal2.y * textureLod(uPrevAmbient, vec3(y_offset, local_pos.yz), 0.0).rgb +
            normal2.z * textureLod(uPrevAmbient, vec3(z_offset, local_pos.yz), 0.0).rgb;

        mediump float w = weight_term(local_pos);
        result *= w;
    }
    else
        result = vec3(0.0);

    return result;
}

mat3 sample_patch(ivec2 coord, vec3 pos, vec3 world_pos, bool do_lighting)
{
    vec3 emissive = texelFetch(uProbeEmissive, coord, 0).rgb;
    vec3 color = emissive;
    if (do_lighting)
    {
        vec3 albedo = texelFetch(uProbeAlbedo, coord, 0).rgb;
        vec3 normal = normalize(texelFetch(uProbeNormal, coord, 0).xyz * 2.0 - 1.0);
        color += albedo * (
            compute_feedback_diffuse(world_pos, normal) +
            compute_irradiance_lighting(world_pos, transforms.cam_pos, transforms.cam_front,
                                        normal, directional.direction, directional.color));
    }

    float l2 = dot(pos, pos);
    float inv_l = inversesqrt(l2);

    // We have 4 patches per face, so it cancels out the 4.0 / (res * res) computation.
    // Formula for area derived from estimating the area coverage of a cubemap texel
    // when projected over sphere.
    // n = [u, v, 1]
    // l = length(n)
    // n' = n / l
    // A ~= dot(n', cross((n + du) / length(n + du) - n', (n + dv) / length(n + dv) - n')
    // A ~= dot(n', cross(du / l, dv / l))
    // A ~= dot(n', dz)
    // A ~= dot(n', [0, 0, (2 / (l * res)) * (2 / (l * res))])
    // A ~= 4.0 / (res^2 * l^3)
    float area = registers.inv_patch_resolution2 * inv_l * inv_l * inv_l;

    vec3 n = pos * inv_l;
    vec3 hemisphere_area = abs(n) * area;

    return mat3(
        color * hemisphere_area.x,
        color * hemisphere_area.y,
        color * hemisphere_area.z);
}

shared mat3 shared_patch_contributions[6 * 2 * 2];
shared mat3 shared_colors[gl_WorkGroupSize.x * gl_WorkGroupSize.y];

const vec3 base_dirs[6] = vec3[](
    vec3(1.0, 0.0, 0.0),
    vec3(-1.0, 0.0, 0.0),
    vec3(0.0, 1.0, 0.0),
    vec3(0.0, -1.0, 0.0),
    vec3(0.0, 0.0, 1.0),
    vec3(0.0, 0.0, -1.0));

const vec3 pos_du[6] = vec3[](
    vec3(0.0, 0.0, -1.0),
    vec3(0.0, 0.0, +1.0),
    vec3(1.0, 0.0, 0.0),
    vec3(1.0, 0.0, 0.0),
    vec3(1.0, 0.0, 0.0),
    vec3(-1.0, 0.0, 0.0));

const vec3 pos_dv[6] = vec3[](
    vec3(0.0, -1.0, 0.0),
    vec3(0.0, -1.0, 0.0),
    vec3(0.0, 0.0, +1.0),
    vec3(0.0, 0.0, -1.0),
    vec3(0.0, -1.0, 0.0),
    vec3(0.0, -1.0, 0.0));

#define M(b) (1u << (b))
const uint patch_mask_per_face[6] = uint[](
    (0xfu << 0) | M(9) | M(11) | M(13) | M(15) | M(17) | M(19) | M(20) | M(22),
    (0xfu << 4) | M(8) | M(10) | M(12) | M(14) | M(16) | M(18) | M(21) | M(23),
    (0xfu << 8) | M(0) | M(1) | M(4) | M(5) | M(20) | M(21) | M(16) | M(17),
    (0xfu << 12) | M(2) | M(3) | M(6) | M(7) | M(18) | M(19) | M(22) | M(23),
    (0xfu << 16) | M(0) | M(2) | M(5) | M(7) | M(10) | M(11) | M(12) | M(13),
    (0xfu << 20) | M(1) | M(3) | M(4) | M(6) | M(8) | M(9) | M(14) | M(15));

void main()
{
    uint num_patch_iterations = registers.num_iterations_per_patch;
    uvec3 probe_index = gl_WorkGroupID;

    for (int face = 0; face < 6; face++)
    {
        for (int patch_y = 0; patch_y < 2; patch_y++)
        {
            for (int patch_x = 0; patch_x < 2; patch_x++)
            {
                mat3 patch_contribution = mat3(0.0);
                for (uint iy = 0; iy < num_patch_iterations; iy++)
                {
                    for (int ix = 0; ix < num_patch_iterations; ix++)
                    {
                        uvec2 patch_coord = uvec2(ix, iy) * gl_WorkGroupSize.xy + gl_LocalInvocationID.xy;
                        vec2 xy = vec2(patch_coord) + 0.5;
                        vec2 uv = xy * registers.inv_patch_resolution;
                        vec2 clip_xy = vec2(patch_x - 1, patch_y - 1) + uv;
                        vec3 pos = base_dirs[face] + clip_xy.x * pos_du[face] + clip_xy.y * pos_dv[face];

                        int probe_x = 6 * int(probe_index.x) + face;
                        int probe_y = int(probe_index.z * gl_NumWorkGroups.y + probe_index.y);
                        ivec2 base_probe_coord = ivec2(probe_x, probe_y) * registers.face_resolution;
                        ivec2 tex_coord = base_probe_coord + ivec2(patch_coord);

                        vec3 tex_space = (vec3(gl_WorkGroupID) + 0.5) * inv_probe_resolution;
                        vec3 probe_pos = vec3(
                            dot(texture_to_world[0], vec4(tex_space, 1.0)),
                            dot(texture_to_world[1], vec4(tex_space, 1.0)),
                            dot(texture_to_world[2], vec4(tex_space, 1.0)));

                        float d = texelFetch(uProbeDepth, tex_coord, 0).x;
                        vec4 clip = vec4(clip_xy, d, 1.0);
                        vec4 world4 = transforms.inv_view_proj_for_face[face] * clip;
                        vec3 world = world4.xyz / world4.w + probe_pos;

                        patch_contribution += sample_patch(tex_coord, pos, world, d < 1.0);
                    }
                }

                shared_colors[gl_LocalInvocationIndex] = patch_contribution;

#define ITERATE(l) if (gl_LocalInvocationIndex < l) { shared_colors[gl_LocalInvocationIndex] += shared_colors[gl_LocalInvocationIndex + l]; }

                // TODO: We can use subgroup ops quite easily.
                barrier();
                ITERATE(32u)
                barrier();
                ITERATE(16u)
                barrier();
                ITERATE(8u)
                barrier();
                ITERATE(4u)
                barrier();
                ITERATE(2u)
                barrier();
                if (gl_LocalInvocationIndex < 3u)
                {
                    int patch_index = 4 * face + 2 * patch_y + patch_x;
                    shared_patch_contributions[patch_index][gl_LocalInvocationIndex] =
                        shared_colors[0][gl_LocalInvocationIndex] + shared_colors[1][gl_LocalInvocationIndex];
                }
                barrier();
            }
        }
    }

    // TODO: This will require dynamic subgroupShuffle. Might be best to do a hybrid kind of approach here ...
    uint face = gl_LocalInvocationIndex;
    if (face < 6u)
    {
        uint mask = patch_mask_per_face[face];
        vec3 total = vec3(0.0);
        while (mask != 0u)
        {
            int bit = findLSB(mask);
            mask &= ~(1u << uint(bit));
            total += shared_patch_contributions[bit][face >> 1u];
        }

        total /= PI;
        imageStore(uAmbient, ivec3(probe_index) + ivec3(face * gl_NumWorkGroups.x, 0, 0), vec4(total, 0.0));
    }
}